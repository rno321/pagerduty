name: Docker

on:
  # schedule:
  #   - cron: '18 17 * * *'
  push:
    branches: [ "main" ]
    # tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      # Deploy to OVH instance
      - name: Deploy to OVH
        if: github.event_name != 'pull_request'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          GHCR_PAT: ${{secrets.ghcr_pat}}
          OVH_USER: ${{ secrets.OVH_USER }}
          OVH_HOST: ${{ secrets.OVH_HOST }}
          DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          MONGODB_DB: ${{ secrets.MONGODB_DB }}
          MONGODB_USER: ${{ secrets.MONGODB_USER }}
          MONGODB_PWD: ${{ secrets.MONGODB_PWD }}
          MONGODB_HOST: ${{ secrets.MONGODB_HOST }}
          MONGODB_PORT: ${{ secrets.MONGODB_PORT }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        run: |
          echo $DOCKER_IMAGE
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -i private_key.pem -o StrictHostKeyChecking=no $OVH_USER@$OVH_HOST << EOF
            docker login ghcr.io -u ${{ github.actor }} -p $GHCR_PAT
            docker pull $DOCKER_IMAGE
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            sudo docker run -d --name $CONTAINER_NAME -p 80:3000 \
            -e MONGODB_DB="$MONGODB_DB" \
            -e MONGODB_USER="$MONGODB_USER" \
            -e MONGODB_PWD="$MONGODB_PWD" \
            -e MONGODB_HOST="$MONGODB_HOST" \
            -e MONGODB_PORT="$MONGODB_PORT" \
            $DOCKER_IMAGE
            docker logout ghcr.io
            rm -f /home/ubuntu/snap/docker/2915/.docker/config.json
          EOF
      
          rm private_key.pem
